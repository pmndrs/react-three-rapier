/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useGLTF } from "@react-three/drei";
import type { GLTF } from "three-stdlib";
import { useEffect, useRef } from "react";
import { Group, Mesh, MeshPhysicalMaterial, MeshStandardMaterial } from "three";
import { RigidBody } from "@react-three/rapier";
import { useDemo } from "../../App";
import { resetOrbitControl } from "../../hooks/resetOrbitControl";

type GLTFResult = GLTF & {
  nodes: {
    plinko: Mesh;
    container: Mesh;
    wall: Mesh;
  };
  materials: {
    blue: MeshStandardMaterial;
    Material: MeshPhysicalMaterial;
    ["Material.001"]: MeshPhysicalMaterial;
  };
};

export default function Plinko({ ...props }: JSX.IntrinsicElements["group"]) {
  const group = useRef<Group>(null);
  const { orbitControlRef } = useDemo();

  const { nodes, materials } = useGLTF(
    // @ts-ignore
    new URL("../../models/plinko.glb", import.meta.url).toString()
  ) as unknown as GLTFResult;

  resetOrbitControl();

  return (
    <group
      ref={group}
      {...props}
      dispose={null}
      rotation={[0, -1, 0]}
      position={[6, 0, 0.75]}
      scale={1}
    >
      <RigidBody type="fixed" colliders="trimesh" position={[-5, 1, 5]}>
        <group scale={1}>
          <mesh
            geometry={nodes.plinko.geometry}
            material={materials.blue}
            material-color="blue"
            castShadow
            receiveShadow
            rotation={[0, Math.PI / 3.2, 0.4]}
            position={[0, 6.58, 0]}
          />
        </group>
      </RigidBody>
      <RigidBody type="fixed" colliders={"trimesh"}>
        <mesh
          geometry={nodes.container.geometry}
          material={materials.Material}
          castShadow
          rotation={[0, 1, 0]}
        />
      </RigidBody>
      <RigidBody type="fixed" colliders={"hull"}>
        <mesh
          geometry={nodes.wall.geometry}
          material={materials["Material.001"]}
          rotation={[0, Math.PI / 3.1, 0]}
          position={[-2.5, -0.39, 4]}
        />
      </RigidBody>
    </group>
  );
}
