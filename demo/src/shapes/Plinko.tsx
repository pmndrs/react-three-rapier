import React from "react";

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import type { GLTF } from "three-stdlib";
import { useConvexHull, useTrimesh } from "@react-three/rapier";
import { useRef } from "react";
import { Mesh } from "three";

type GLTFResult = GLTF & {
  nodes: {
    plinko: THREE.Mesh;
    container: THREE.Mesh;
    wall: THREE.Mesh;
  };
  materials: {
    blue: THREE.MeshStandardMaterial;
    Material: THREE.MeshPhysicalMaterial;
    ["Material.001"]: THREE.MeshPhysicalMaterial;
  };
};

export default function Plinko({ ...props }: JSX.IntrinsicElements["group"]) {
  const group = useRef<THREE.Group>(null);

  const { nodes, materials } = useGLTF(
    // @ts-ignore
    new URL("plinko.glb", import.meta.url).toString()
  ) as unknown as GLTFResult;

  const [plinko] = useTrimesh.fromMesh<Mesh>(nodes.plinko, {
    type: "fixed",
  });

  const [wall] = useConvexHull.fromMesh<Mesh>(nodes.wall, {
    type: "fixed"
  });

  const [container] = useTrimesh.fromMesh<Mesh>(nodes.container, {
    type: "fixed"
  });

  return (
    <group ref={group} {...props} dispose={null} rotation={[0, -1, 0]}>
      <group position={[0, 0, -.4]} rotation={[-.1, 0, 0]}>
      <mesh
        ref={plinko}
        geometry={nodes.plinko.geometry}
        material={materials.blue}
        material-color="blue"
        castShadow
        receiveShadow
        rotation={[0, 0, .2]}
        position={[0, 7.58, -1.06]}
      />
      </group>
      <mesh
        ref={container}
        geometry={nodes.container.geometry}
        material={materials.Material}
        castShadow
        rotation={[0, 1, 0]}
      />
      <mesh
        ref={wall}
        geometry={nodes.wall.geometry}
        material={materials["Material.001"]}
        position={[0, -0.39, 0.44]}
      />
    </group>
  );
}
